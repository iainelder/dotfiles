name: Non-root

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Install sudo and create passwordless group
        run: |
          apt install sudo
          echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers
      
      # https://www.yegor256.com/2014/08/29/docker-non-root.html
      - name: Add nonroot user
        run: |
          adduser --disabled-password --gecos '' nonroot
          adduser nonroot sudo

      - name: List dirs as root
        run: |
          echo "Hello from $(whoami)"
          whoami
          pwd
          ls -lR /__w

        # Use `su` to execute the script as r. r doesn't have permissions to
        # execute `{0}`. It resolves to a script whose content is the text
        # block in `run`. It is executable only by `root`. But once executed
        # we want it to run as if executed by r.
        #
        # Using `su` without `--login` keeps us in the workspace folder.
        #
        # The alterative would be to use the default shell and include the
        # `su` command inline. That's not as clean as this solution.
      - name: List dirs as nonroot
        shell: su nonroot {0}
        run: |
          echo "Hello from $(whoami)"

          whoami
          pwd
          ls -lR .

      # In a real interactive session the PATH is set automatically in the
      # expected way by sourcing bashrc. But Github Actions ignores any attempts
      # to set the PATH variable. Instead it requires this syntax, and it takes
      # effect only on subsequent steps.
      #
      # Normally you'd use `~` in the PATH expression so that it is resolved to
      # the user's real home when bashrc is sourced, but Github Actions appears
      # to resolve the paths before r gets control.
      #
      # Using `su` without `--login`, although it doesn't change to the target
      # user's home directory, still sets the HOME environment variable. So we
      # can use that variable, which has already resolved to an absolute path,
      # in the PATH expression. That way the right path should still be
      # available to r after all of Github Action's PATH processing.
      - name: Set PATH the Github way
        shell: su nonroot {0}
        run: |
          echo "${HOME}/.local/bin" |
          sudo tee --append "${GITHUB_PATH}" |
          xargs echo Added to path

      - name: Check path as root
        run: |
          echo $PATH | tr ':' '\n'

      - name: Check path as nonroot
        shell: su nonroot {0}
        run: |
          echo $PATH | tr ':' '\n'
